{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","process","PORT","axios","get","then","response","data","newObject","post","id","delete","put","Notification","props","message","type","console","log","className","Filter","value","onChange","PersonForm","onSubmit","name","onNameChange","number","onNumberChange","Persons","filteredList","map","person","onClick","deleteName","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","nameFilter","setNameFilter","notifMessage","setNotifMessage","useEffect","personService","filter","toLowerCase","includes","event","target","preventDefault","some","item","window","confirm","find","updatedInfo","updatedPerson","catch","error","setTimeout","newPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d92b19a.chunk.js","sourcesContent":["import axios from \"axios\"\r\nconst PORT = process.env.PORT || 3001\r\nconst baseUrl = `/api/persons`\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then((response) => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then((response) => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    // note sure if there is any actual data to process\r\n    return request.then((response) => response.data)\r\n}\r\n\r\nconst update = (id, data) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, data)\r\n    return request.then((response) => response.data)\r\n}\r\n\r\nexport default { getAll, create, remove, update }\r\n","import React, { useState, useEffect } from \"react\"\r\nimport personService from \"./services/persons\"\r\n\r\nconst Notification = (props) => {\r\n    const { message, type } = props.message\r\n    if (message === null) {\r\n        return null\r\n    }\r\n    console.log(\"message type: \", type)\r\n    return <div className={type}>{message}</div>\r\n}\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>\r\n            filter shown with\r\n            <input value={props.value} onChange={props.onChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.onSubmit}>\r\n            <div>\r\n                name:\r\n                <input value={props.name} onChange={props.onNameChange} />\r\n            </div>\r\n            <div>\r\n                number:\r\n                <input value={props.number} onChange={props.onNumberChange} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst Persons = (props) => {\r\n    return (\r\n        <div>\r\n            {props.filteredList.map((person) => (\r\n                <div key={person.name}>\r\n                    {person.name} {person.number}{\" \"}\r\n                    <button\r\n                        onClick={() => props.deleteName(person.id, person.name)}\r\n                    >\r\n                        delete\r\n                    </button>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst App = () => {\r\n    const [persons, setPersons] = useState([])\r\n    const [newName, setNewName] = useState(\"\")\r\n    const [newNumber, setNewNumber] = useState(\"\")\r\n    const [nameFilter, setNameFilter] = useState(\"\")\r\n    const [notifMessage, setNotifMessage] = useState({\r\n        message: null,\r\n        type: null,\r\n    })\r\n\r\n    const hook = () => {\r\n        console.log(\"Grabbing data from server\")\r\n        personService.getAll().then((persons) => setPersons(persons))\r\n    }\r\n\r\n    useEffect(hook, [])\r\n\r\n    const handleNameChange = (event) => {\r\n        console.log(event.target.value)\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handleNumberChange = (event) => {\r\n        console.log(event.target.value)\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    const handleFilterChange = (event) => {\r\n        console.log(event.target.value)\r\n        setNameFilter(event.target.value)\r\n    }\r\n\r\n    const addName = (event) => {\r\n        event.preventDefault()\r\n        if (persons.some((item) => item.name === newName)) {\r\n            if (\r\n                window.confirm(\r\n                    `${newName} is already added to phonebook, replace the old number with a new one?`\r\n                )\r\n            ) {\r\n                const person = persons.find((item) => item.name === newName)\r\n                const updatedInfo = {\r\n                    ...person,\r\n                    number: newNumber,\r\n                }\r\n                personService\r\n                    .update(person.id, updatedInfo)\r\n                    .then((updatedPerson) =>\r\n                        setPersons(\r\n                            persons.map((item) =>\r\n                                item.id !== person.id ? item : updatedPerson\r\n                            )\r\n                        )\r\n                    )\r\n                    .catch((error) => {\r\n                        // Basically the same as the below catch block\r\n                        console.log(error)\r\n                        setNotifMessage({\r\n                            message: error.response.data.error,\r\n                            type: \"error\",\r\n                        })\r\n                        setNewName(\"\")\r\n                        setNewNumber(\"\")\r\n                        // This error shouldn't happen now that we're not using local vars anymore?\r\n                        // remove this person from local array\r\n                        // setPersons(\r\n                        //     persons.filter((item) => item.id !== person.id)\r\n                        // )\r\n                        setTimeout(() => {\r\n                            setNotifMessage({\r\n                                message: null,\r\n                                type: null,\r\n                            })\r\n                        }, 5000)\r\n                    })\r\n            }\r\n        } else {\r\n            personService\r\n                .create({ name: newName, number: newNumber })\r\n                .then((newPerson) => {\r\n                    setPersons(persons.concat(newPerson))\r\n                    setNotifMessage({\r\n                        message: `Added ${newName}`,\r\n                        type: \"success\",\r\n                    })\r\n                    setNewName(\"\")\r\n                    setNewNumber(\"\")\r\n                    setTimeout(() => {\r\n                        setNotifMessage({\r\n                            message: null,\r\n                            type: null,\r\n                        })\r\n                    }, 5000)\r\n                })\r\n                .catch((error) => {\r\n                    setNotifMessage({\r\n                        message: error.response.data.error,\r\n                        type: \"error\"\r\n                    })\r\n                    setNewName(\"\")\r\n                    setNewNumber(\"\")\r\n                    setTimeout(() => {\r\n                        setNotifMessage({\r\n                            message: null,\r\n                            type: null\r\n                        })\r\n                    }, 5000)\r\n                })\r\n        }\r\n    }\r\n\r\n    const deleteName = (id, person) => {\r\n        if (window.confirm(`Delete ${person}?`)) {\r\n            personService.remove(id).then(() => {\r\n                setPersons(persons.filter((person) => person.id !== id))\r\n            })\r\n        }\r\n    }\r\n\r\n    // very simple filter\r\n    const filteredList = persons.filter((person) => {\r\n        const filter = nameFilter.toLowerCase()\r\n        const name = person.name.toLowerCase()\r\n        return name.includes(filter)\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n            <Notification message={notifMessage} />\r\n            <Filter value={nameFilter} onChange={handleFilterChange} />\r\n            <h2>add a new</h2>\r\n            <PersonForm\r\n                onSubmit={addName}\r\n                name={newName}\r\n                onNameChange={handleNameChange}\r\n                number={newNumber}\r\n                onNumberChange={handleNumberChange}\r\n            />\r\n            <h2>Numbers</h2>\r\n            <Persons filteredList={filteredList} deleteName={deleteName} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\nimport \"./index.css\"\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n"],"sourceRoot":""}